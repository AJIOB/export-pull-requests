require "csv"
require "optparse"
require "time"
require "github_api"

VERSION = "0.0.1"

def localtime(t)
  Time.parse(t).localtime.strftime("%x %X")
end

def parse_repos(repos)
  repos.map do |r|
    abort "invalid repository #{r}" unless r =~ %r{\A(\S+)/(\S+)\z}
    [ $1, $2 ]
  end
end

def lookup_token
  return ENV["EPR_TOKEN"] unless ENV["EPR_TOKEN"].to_s.strip.empty?

  begin
    %w[epr.token github.oauth-token].each do |setting|
      token = `git config #{setting}`.chomp
      return token unless token.empty?
    end
  rescue Errno::ENOENT
    # git not found, ignore
  end
end

token  = lookup_token
filter = "open"
include_users = []
exclude_users = []

parser = OptionParser.new do |opts|
  opts.banner = "usage: #{File.basename($0)} [-hv] [-s state] [-t token] [-c user1,user2...] user/repo1 [user/repo2...]"

  opts.on "-c", "--creator=user1,user2,...", Array, "Export PRs created by given username(s); prepend `!' to exclude user" do |u|
    exclude_users, include_users = u.partition { |name| name.start_with?("!") }
    exclude_users.map! { |name| name[1..-1] } # remove "!"
  end

  opts.on "-h", "--help", "Show this message" do
    puts opts
    exit
  end

  opts.on "-t", "--token=TOKEN", "API token" do |t|
    token = t
  end

  opts.on "-s", "--state=STATE", %w[open closed all], "Export PRs in the given state, defaults to open" do |f|
    filter = f
  end

  opts.on "-v", "--version", "epr version" do
    puts "v#{VERSION} (GitHub API v#{Github::VERSION})"
    exit
  end
end

parser.parse!
abort parser.banner if ARGV.empty?
abort "API token required! Set it via the -t option or via the EPR_TOKEN environment variable" unless token

repos = parse_repos(ARGV)

rows = []
rows << %w[# User Title State Created Updated URL]
rows[-1].unshift("Repository") if repos.size > 1

gh = Github.new(:oauth_token => token, :auto_pagination => true)

repos.each do |user, repo|
  gh.pull_requests.list(:user => user, :repo => repo, :state => filter).each_page do |page|
    next if page.size.zero?     # Needed for auto_pagination

    page.each do |pr|
      next if exclude_users.include?(pr.user.login)
      next if include_users.any? && !include_users.include?(pr.user.login)

      rows << [
        "#{user}/#{repo}",
        pr.number,
        pr.user.login,
        pr.title,
        pr.state,
        localtime(pr.created_at),
        localtime(pr.updated_at),
        pr.html_url,
      ]

      rows[-1].shift unless repos.size > 1
    end

    rows.each { |r| puts r.to_csv }
    rows.clear
  end
end
