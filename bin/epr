#!/usr/bin/env ruby

require "csv"
require "optparse"
require "time"
require "logger"

require "github_api"
require "gitlab"
require "bitbucket_rest_api"

VERSION = "0.1.1"
SERVICES = %w[github gitlab bitbucket]

def localtime(t)
  Time.parse(t).localtime.strftime("%x %X")
end

def parse_repos(repos)
  repos.map do |r|
    abort "invalid repository #{r}" unless r =~ %r{\A(\S+)/(\S+)\z}
    [ $1, $2 ]
  end
end

def skip_user?(user)
  $exclude_users.include?(user) || $include_users.any? && !$include_users.include?(user)
end

def lookup_token
  return ENV["EPR_TOKEN"] unless ENV["EPR_TOKEN"].to_s.strip.empty?

  begin
    %w[epr.token github.oauth-token].each do |setting|
      token = `git config #{setting}`.chomp
      return token unless token.empty?
    end
  rescue Errno::ENOENT
    # git not found, ignore
  end
end

def bitbucket(user, repo)
  page = 0
  rows = []

  $bitbucket ||= BitBucket.new(:basic_auth => $token)
  # TODO: make sure no need to translate any states
  # https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests

  loop do
    page += 1

    prs = $bitbucket.repos.pull_request.all(user, repo, :page => page, :state => $filter.upcase)
    prs["values"].each do |pr|
      next if pr.author && skip_user?(pr.author.username)

      rows << [
        "#{user}/#{repo}",
        pr.id,
        pr.author ? pr.author.username : "-",
        pr.title,
        pr.state,
        localtime(pr.created_on),
        localtime(pr.updated_on),
        pr["links"].html.href
      ]
    end

    break unless prs["next"]
  end

  rows
end

def github(user, repo)
  rows = []

  $gh ||= Github.new(:oauth_token => $token, :auto_pagination => true)
  $gh.pull_requests.list(:user => user, :repo => repo, :state => $filter).each_page do |page|
    next if page.size.zero?     # Needed for auto_pagination

    page.each do |pr|
      next if skip_user?(pr.user.login)

      rows << [
        "#{user}/#{repo}",
        pr.number,
        pr.user.login,
        pr.title,
        pr.state,
        localtime(pr.created_at),
        localtime(pr.updated_at),
        pr.html_url,
      ]
    end
  end

  rows
end

def gitlab(user, repo)
  rows = []

  # Do we care about this differing in output?
  state = $filter == "open" ? "opened" : $filter

  # TODO: custom endpoint
  $gitlab ||= Gitlab.client(:token => $token, :endpoint => "https://gitlab.com/api/v4")
  $gitlab.merge_requests("#{user}/#{repo}", :state => state).auto_paginate do |mr|
    next if skip_user?(mr.author.username)

    rows << [
      "#{user}/#{repo}",
      # Yes, it's called iid
      mr.iid,
      mr.author.username,
      mr.title,
      mr.state,
      localtime(mr.created_at),
      localtime(mr.updated_at),
      mr.web_url
    ]
  end

  rows
end

def export_repos(repos)
  rows = []
  rows << %w[Repository # User Title State Created Updated URL]

  repos.each do |user, repo|
    case $provider
    when "github"
      rows.concat(github(user, repo))
    when "gitlab"
      rows.concat(gitlab(user, repo))
    when "bitbucket"
      rows.concat(bitbucket(user, repo))
    else
      abort "unknown service provider: #$provider"
    end

    rows.each do |r|
      # Drop Repository column if we only have one repo
      r.shift unless repos.size > 1
      puts r.to_csv
    end
    rows.clear
  end
end

# Hashie is used by Bitbucket, and it spews warnings to stdout. We stop that,
# specifically: https://github.com/bitbucket-rest-api/bitbucket/issues/87
Hashie.logger = Logger.new(File::NULL) if defined?(Hashie)

$exclude_users = []
$include_users = []
$filter = "open"
$provider = ENV["EPR_SERVICE"] || SERVICES[0]
$token = lookup_token

parser = OptionParser.new do |opts|
  opts.banner = "usage: #{File.basename($0)} [-hv] [-s state] [-t token] [-c user1,user2...] user/repo1 [user/repo2...]"

  opts.on "-c", "--creator=user1,user2,...", Array, "Export PRs created by given username(s); prepend `!' to exclude user" do |u|
    $exclude_users, $include_users = u.partition { |name| name.start_with?("!") }
    $exclude_users.map! { |name| name[1..-1] } # remove "!"
  end

  opts.on "-h", "--help", "Show this message" do
    puts opts
    exit
  end

  opts.on "-t", "--token=TOKEN", "API token" do |t|
    $token = t
  end

  opts.on "-p, --provider=NAME", SERVICES, "Service provider, one of: #{SERVICES}" do |name|
    $provider = name
  end

  opts.on "-s", "--state=STATE", %w[open closed all merged], "Export PRs in the given state, defaults to open" do |f|
    $filter = f
  end

  opts.on "-v", "--version", "epr version" do
    puts "v#{VERSION} (GitHub v#{Github::VERSION}, GitLab v#{Gitlab::VERSION}, Bitbucket v#{BitBucket::VERSION::STRING})"
    exit
  end
end

parser.parse!
abort parser.banner if ARGV.empty?

begin
  export_repos(parse_repos(ARGV))
rescue => e
  abort "Export failed: #{e}"
end
